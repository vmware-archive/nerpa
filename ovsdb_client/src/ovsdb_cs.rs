/*
Copyright (c) 2021 VMware, Inc.
SPDX-License-Identifier: MIT
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* OVSDB CS structs and safe API.
 * Some structs are defined in the '.c' files, so bindgen does not generate them.
 * Some bindgen-generated functions are wrapped in a safe API. */

/* Synced with 'ovsdb_cs' in 'ovs/lib/ovsdb-cs.c'. */
#[repr(C)]
pub struct ClientSync {
    pub server: Database,
    pub data: Database,
    
    pub session: JsonRpcSession,
    pub remote: *mut ::std::os::raw::c_char,
    pub state: OvsdbCsState,
    pub state_seqno: ::std::os::raw::c_uint,
    pub request_id: *mut ovsdb_sys::json,

    pub txns: *mut *mut ovsdb_sys::json,
    pub n_txns: size_t,
    pub allocated_txns: size_t,

    pub cid: ovsdb_sys::uuid,
    pub server_rows: ovsdb_sys::hmap,

    pub min_index: u64,
    pub leader_only: bool,
    pub shuffle_remotes: bool,
}

/* Synced with 'ovsdb_cs_db' in 'ovs/lib/ovsdb-cs.c'. */
#[repr(C)]
pub struct Database {
    pub cs: *mut ClientSync,
    
    pub db_name: *const ::std::os::raw::c_char,
    pub tables: ovsdb_sys::hmap,
    pub monitor_id: *mut ovsdb_sys::json,
    pub schema: *mut ovsdb_sys::json,

    pub max_version: ::std::os::raw::c_int,
    pub monitor_version: ::std::os::raw::c_int,

    pub cond_changed: bool,
    pub cond_seqno: ::std::os::raw::c_uint,

    pub lock_name: *mut ::std::os::raw::c_char,
    pub has_lock: bool,
    pub is_lock_contended: bool,
    pub lock_request_id: *mut ovsdb_sys::json,

    pub last_id: ovsdb_sys::uuid,

    pub events: ovsdb_sys::ovs_list,
    pub ops: *const ovsdb_sys::ovsdb_cs_ops,
    pub ops_aux: *mut ::std::os::raw::c_void,
}

/* Synced with 'jsonrpc_session' in 'ovs/lib/jsonrpc.c'. */
#[repr(C)]
pub struct JsonRpcSession {
    pub remotes: ovsdb_sys::svec,
    pub next_remote: size_t,

    /* Even though the bindgen-generated structs are size-0 for the next four fields, this will work because a pointer is stored on the struct.
    * The C function using this struct can still use the field.
    * TODO: Confirm this is true. */
    pub reconnect: *mut ovsdb_sys::reconnect,
    pub rpc: *mut ovsdb_sys::jsonrpc,
    pub stream: *mut ovsdb_sys::stream,
    pub pstream: *mut ovsdb_sys::pstream,

    pub last_error: ::std::os::raw::c_int,
    pub seqno: ::std::os::raw::c_uint,
    pub dscp: u8, // uint8_t

    pub max_n_msgs: size_t,
    pub max_backlog_bytes: size_t,
}

/* Synced with 'ovsdb_cs_state' in 'ovs/lib/ovsdb-cs.c'.
 * C enums translate to type raw::c_uint in Rust. */
pub type OvsdbCsState = ::std::os::raw::c_uint;

/* Synced with 'size_t' type generated by bindgen in 'ovsdb-sys'. */
pub type size_t = ::std::os::raw::c_ulong;